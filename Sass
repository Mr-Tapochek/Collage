@use "sass:list";
@use "sass:map";
@use "sass:string";
@use "sass:math";
@import 'header-scss', 'base-tags-scss';
$my-fonts: (TeletactileRus, GROBOLDoutline, LumiosTypewriter-Tape_0);
$back-site-color: #ebedf5;
$black-color: black;
$white-color: white;

.fix{
    position: fixed;
    bottom: 1%;
    right: 1%;
    z-index: 5;
}

%butts-all{
    display: flex;
    counter-reset: button-counter;
    justify-content: space-around;
}
.buttons{
  @extend %butts-all;
}

@mixin covers($hg, $wd, $mar, $b-sh, $bor-r){
    height: $hg;
    width: $wd;
    margin: $mar;
    box-shadow: $b-sh;
    border-radius: $bor-r;
    background-color: $white-color;
}
$shadow-type: 0 10px 20px -8px #c5d6d6;
$values: 300px, 450px, 20px, $shadow-type, 4px;
$numbers: button-counter;
.button-cover{
  @include covers($values...);
  &:before {
    counter-increment: $numbers;
    content: counter($numbers);
    color: #afa4a4;
    font-size: 16px;
    line-height: 1;
    padding: 5px;
  }
}
@mixin place($place-value){
  position: $place-value;
}
.checkbox {
    @include place(relative);
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    opacity: 0;
    cursor: pointer;
    z-index: 3;
  &:checked+.knobs:before {
    content: "NO";
    left: 84px;
    background-color: #FF000D;
  }

  &:checked~.layer {
    background-color: #FF8A90;
  }
  &:checked~.butt span {
    transform: rotateX(-180deg);
  }
  &:checked~.fon {
    background-color: #40DE40;
    box-shadow: inset 0px 3px 5px 2px rgb(0 0 0 / 50%);
  }
}

@mixin button-body($t, $wd, $hg, $mar){
    top: $t;
    width: $wd;
    height: $hg;
    margin: $mar auto 0 auto;
    overflow: hidden;
    @include place(relative);
}
#button-1 {
    @include button-body(50%, 148px, 72px, -60px);
    border-radius: 100px;
}
%buttons-parts{
    @include place(absolute);
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}
@mixin parts-knobs-switch($col, $cont, $f-s, $f-w, $back-c){
    color: $col;
    content: $cont;
    font-size: $f-s;
    font-weight: $f-w;
    background-color: $back-c;
}
.knobs {
    @extend %buttons-parts;
    transition: 0.3s ease all;
    z-index: 2;
    &:before {
      @include place(absolute);
      @include parts-knobs-switch($white-color, "YES", 20px, bold, #18FD00);
      top: 8px;
      left: 8px;
      width: 40px;
      height: 20px;
      text-align: center;
      line-height: 1;
      padding: 18px 8px;
      border-radius: 50%;
      transition: 0.3s cubic-bezier(0.18, 0.89, 0.35, 1.15) all;
}
}
@mixin fon-button($wd, $back-c, $transit, $z, $bor-r) {
    width: $wd;
    background-color: $back-c;
    transition: $transit;
    z-index: $z;
    border-radius: $bor-r;
}
.layer {
    @extend %buttons-parts;
    @include fon-button(100%, #95FF8A, 0.3s ease all, 1, 100px);
}

#button-2{
    @include place(relative);
    @include button-body(25%, 150px, 140px, -20px);
}
.back{
    @extend %buttons-parts;
    @include fon-button(100%, #eee8e8, 0.3s ease all, 1, 5px);
}
%butt-repeat{
    position: absolute;  
    color: #615656;
    font-weight: bold;
    line-height: 1;
    transform: rotateX(0);
    transition: 0.6s ease all;
}
.butt{
    @extend %buttons-parts;
    z-index: 2;
    perspective: 150px;
  &:before {
    @extend %butt-repeat; 
    content: string.quote(string.to-upper-case(no));
    top: 30px;
    left: 65px;
  }
  &:after {
    @extend %butt-repeat; 
    content: string.quote(string.to-upper-case(yes));
    bottom: 40px;
    left: 60px;
  }
  span {
    position: absolute;
    right: 4px;
    height: 60px;
    width: 42px;
    background-color: #d1c0c0;
    clip-path: polygon(10% 0, 90% 0, 100% 100%, 0 100%);
    transform: rotateX(0);
    transform-origin: bottom;
    transition: 0.6s ease all;
    z-index: 1;
    top: 10px;
    left: 54px;
  }
}

#button-3 {
    @include button-body(25%, 150px, 150px, -20px); 
    border-radius: 100px;
    z-index: 3;
}
.fon {
    @extend %buttons-parts;
    @include fon-button(100%, #FF3939, 0.3s ease all, 1, 100px);
}
.baze {
    top: 29px;
    left: 30px;
    width: 60%;
    height: 60%;
    z-index: 2;
    border-radius: 100%;
}
@each $hs in h2, h3{
  @if $hs == h2{
    #{$hs} {
      text-align: center;
      text-decoration: overline;
    }
  } @else {
    #{$hs} {
      text-align: center;
      text-decoration: underline;
    }
  }
}
.flexs{
    display: flex;
    flex-flow: row wrap;
    justify-content: space-evenly;
    gap: 5%;
  *{
    background-color: $white-color;
    width: #{math.ceil(math.pow(21.2, 2))}px;
    height: 300px;
    box-shadow: $shadow-type;
    border-radius: 4px;
    color: $black-color;
    font-size: 52px;
    margin-top: 40px;
    justify-content: center;
    display: flex;
    align-items: center;
  }
}
.grids{
    display: grid;
    grid-template: repeat(6, 200px) / repeat(6, 200px);
    gap: 10px;
    margin-left: 15%;
}
%grid-in{
    background-color: $white-color;
    border-radius: 4px;
    box-shadow: $shadow-type;
    color:$black-color;
    font-size: 52px;
    justify-content: center;
    display: flex;
    align-items: center;
}
@mixin grid-value($rs, $cs, $re, $ce, $col){
    grid-row-start: $rs;
    grid-column-start: $cs;
    grid-row-end: $re;
    grid-column-end: $ce;  
    background-color: $col;
}
.agrid{
    @extend %grid-in;
    @include grid-value(1, 1, 5, 4, #ff594d);
}
.bgrid{
    @extend %grid-in;
    @include grid-value(1, 4, 3, 7, #ffc14d);
}
.cgrid{
    @extend %grid-in;
    @include grid-value(4, 5, 6, 6, #ffed4d);
}
.dgrid{
    @extend %grid-in;
    @include grid-value(5, 1, 7, 3, #90f84b);
}
.egrid{
    @extend %grid-in;
    @include grid-value(6, 3, 7, 7, #5a68e5);
}
table{
    margin-left: 7%;
}
th,
tr,
td{
    background-color: $white-color;
    box-shadow: $shadow-type;
    border-radius: 4px;
    border-collapse: separate;
    padding: 10px;
    margin: 5px;
    font-size: 52px;
    text-align: left;
}
marquee{
    background-image: url(./picture/sky.webp);
    background-repeat: auto;
}
.parts{
    @include place(relative);
    height: 800px;
}
$anime: animacolor 3s ease infinite, animascale 4s ease-in-out infinite, anima1 5s linear infinite;
.scale{
    @include place(absolute);
    width: 300px;
    height: 150px;
    border-radius: 5px;
    animation: $anime;
}
$animecolor-each: (0% : #ff594d, 25% : #ffc14d, 50% : #90f84b, 75% : #5a68e5, 100% : #ff594d);
@keyframes animacolor {
    @each $time, $col in $animecolor-each{
       #{$time}{
        background-color: $col; 
}}}
$animescale-each: (0% : 100%, 25% : 60%, 50% : 30%, 75% : 60%, 100% : 100%);
@keyframes animascale {
    @each $time, $val in $animescale-each{
       #{$time}{
          scale: $val;
}}}

@mixin anima1-value($rot, $tp, $lf){
    rotate: $rot;
    top: $tp;
    left: $lf; 
}
@keyframes anima1 {
    0%{
        @include anima1-value(0deg, 0%, 20%);
    }
    25%{
        @include anima1-value(90deg, 40%, 35%);
    }
    50%{
        @include anima1-value(180deg, 80%, 20%);
    }
    75%{
        @include anima1-value(270deg, 40%, 0%);
    }
    100%{
        @include anima1-value(360deg, 0%, 20%);
    }
}
$widths-max: 300px, 400px, 342px, 12px, 4px;
$widths-min: 3000px, 400px, 30042px, 10542px, 54374px;
.round{
    width: math.max($widths-max...);
    height: math.min($widths-min...);
    background-color: $white-color;
    @include place(absolute);
    right: 15%;
    top: 25%;
    animation: animaround 5s ease-in-out infinite alternate-reverse;
}
@mixin animaround-value($bor-r, $col, $rot){
    border-radius: $bor-r;
    box-shadow: 0px 0px 20px 5px $col;
    transform: rotate($rot);
}

@keyframes animaround {
    0% {
     @include animaround-value(0 0 0 0, rgba(255, 61, 47, 0.7), 0);
    }
    25% {
      @include animaround-value(50%  0 0 0, rgba(255, 172, 47, 0.7), 45deg);
    }
    50% {
      @include animaround-value(50% 50% 0 0, rgba(255, 252, 47, 0.7), 90deg);
    }
    75% {
      @include animaround-value(50% 50% 50% 0, rgba(47, 255, 57, 0.7), 135deg);
    }
    100% {
      @include animaround-value(50% 50% 50% 50%, rgba(47, 179, 255, 0.7), 180deg);
    }
}
$border-alf: solid 1px black;
.over-font{
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
    font-size: 2.5rem;
    border-top: $border-alf;
    border-left: $border-alf;
    margin: 0 2% 0 2%;
    *{
      padding: 1rem;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border-right: $border-alf;
      border-bottom: $border-alf;
  }
}

@each $fonts in $my-fonts{
  ##{string.to-lower-case($fonts)}-#{string.unique-id()}{
    font-family: "#{$fonts}";
  }
}
/*
@use "sass:string";

$random-id: string.unique-id(); 
@debug string.unique-id();
@debug "alexey-#{string.unique-id()}";
@for $i from 1 through 5{
  @debug "alexey-#{string.unique-id()}";
};
*/
